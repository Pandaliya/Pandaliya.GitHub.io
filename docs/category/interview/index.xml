<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cleinTTech</title>
    <link>https://blog.page3app.com/docs/category/interview/</link>
    <description>Recent content on cleinTTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://blog.page3app.com/docs/category/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/0218_swift_interv_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/0218_swift_interv_1/</guid>
      <description>Swift面试刷题（一） #  swift基础面试题
01 swift枚举的关联值和原始值怎么区分？ #  关联值：是指将枚举成员和其他类型的变量存储在一起 原始值：枚举成员可以使用相同类型的默认值预先绑定，这个默认值叫做原始值
enum Date {  // 设置枚举成员关联值  case digit(year:Int, month:Int, day:Int)  case string(String) }  enum Grade: String {  case perfect = &amp;#34;A&amp;#34;  case great = &amp;#34;B&amp;#34;  // ... } 02 什么是延时存储属性？ #  使用lazy可以定义一个延时存储属性，在第一次使用时才进行初始化；
使用lazy的注意点：
 lazy必须是var属性 lazy线程不安全，多线程同时访问时，无法保证只初始化一次  // 定义lazy属性 class PicView {  lazy var image: Image = {  return Image(data:data)  } } 03 什么是运算符重载？ #  类、结构体、枚举可以为现有的运算符提供自定义实现</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/0219_swift_interv_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/0219_swift_interv_2/</guid>
      <description>Swift面试刷题（二） #  Swift比较高级一点的面试题
01 一个Sequence的索引是不是一定从0开始？ #  不一定；开始索引和Next方法实现相关。
class Countdown: Sequence, IteratorProtocol {  var count: Int  init(count: Int) {  self.count = count  }  func next() -&amp;gt; Int? {  if count == 0 {  return nil  } else {  defer { count -= 1 }  return count  }  } } 02 数组都实现了哪些协议？ #  CollectionType/MutableCollectionType
// 生成器 protocol GeneratorType {  typealias Element;  mutating func next() -&amp;gt; Element?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/1_base_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/1_base_1/</guid>
      <description>1.1 Swift和OC的主要区别 #  1.1.1 编程范式 #   swift支持函数式编程，面向协议编程，面向对象编程 OC主要以面向对象为主  说明：swift是比较现代的编程语言。swift支持协议和协议扩展，从而支持面向协议编程；在swift中函数可以作为参，返回值和变量值，从而支持函数式编程。
1.1.2 类型安全 #   swift是一门类型安全的语言，在编译时会做类型检查，如果类型不匹配会抛出一个错误，编译失败。 OC检查到类型不匹配时仅抛出警告。类型最终在运行时确定  1.1.3 值类型增强 #   在siwft中struct（结构体），enum（枚举）和tulpe（元组）都是值类型。其中String/Array/Dictionary/Set都是用结构体实现的也是值类型。 OC中NSString, NSNumber和集合类都是引用类型  值类型的优势：
 不变性：值类型在赋值时会从新创建一个新的值进行赋值。变量A对的修改，不会对变量B造成影响 独占性：引用类可能存在隐式的依赖，比如两个对象都持有同一个可变数组，那他们之间是有依赖的 可交换性  1.1.4 枚举增强 #   swift的枚举可以使用整形，浮点型，字符串；可以拥有属性和方法；可以支持泛型、协议和扩展。 OC的枚举只是一组整形值。  Swift枚举
1.1.5 泛型 #   swift支持泛型，泛型类和泛型函数 OC仅仅在集合类型上添加了对泛型的支持  Swift泛型
1.1.6 协议和扩展 #   Swift协议功能丰富，而且是强约束（遵守协议就要实现所有协议方法），可以用于结构体和枚举。配合协议扩展可以实现面向协议编程。 OC的协议是弱约束，提供optional特性。  1.1.7 函数闭包 #   在swift中可以直接定义函数类型变量，将函数作为参数和返回值。 在OC中不能定义函数类型变量，需要封装成selector或block。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/2_data_2_access_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/2_data_2_access_control/</guid>
      <description>2.1 Swift访问控制 #  访问控制，限定了其他源文件和模块中的代码访问对当前模块或源文件中类/方法/属性的访问权限。Swift的访问控制基于两个概念，模块和源文件：
 模块：一个框架（framework）或者一个app都被视为一个模块，可以使用import关键字导入 源文件：源文件就是模块中的单个源代码文件  访问控制级别 #  私有访问 #  私有访问指所修饰的方法只能在源文件中访问，该级别有两个关键字
private 所修饰的方法或属性只能在当前类里面访问
fileprivate 所修饰的方法或属性可以在当前源文件里访问
内部访问 #  内部访问是指实体（类/方法/属性）可以被模块中的任意源文件访问，同时不可以被模块之外的源文件访问。内部访问是实体的默认访问级别，关键是internal（可以不写）
公共访问 #  公共访问是指：实体可以被导入他所在模块的源文件使用（同时也可以在模块内的任意源文件使用）该级别有两个关键字。
public 实体可以被其他模块访问，但不可以被继承和重写（override）。在所在模块内可以被重写和继承
open 可以被任意模块访问，继承和重写
代码实例 #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/kadun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/kadun/</guid>
      <description>卡顿产生原因和优化 #  屏幕是根据VSync信号刷新屏幕；在两个VSync信号之间CPU要完成下一帧的计算任务，GPU要完成下一帧的渲染任务；如果当VSync信号到达时当前帧没渲染完成，那么屏幕就不会刷新，需要等待下一次VSync才会刷新。这实际就降低了屏幕的刷新率，使用户视觉上产生卡顿。
优化思路 #  总体思路就是降低CPU和GPU消耗。
降低CPU消耗的细节 #   不要频繁调整视图frame或者约束，尽量提前计算好一次调整 使用轻量级的对象，比如不需要交互的视图使用CALayer代替UIView 使用Autolayout会消耗额外性能 使用UImageView时，图片的Size和ImageView的Size最好保持对应（避免CPU做放缩操作） 避免创建过多的线程 耗时操作放到子线程（充分利用多核CPU）：文本处理（尺寸计算）；图片处理（解码，绘制）  图片异步解码的方式 #   首先拿到图片转换成CGImage 创建一个图形上下文 然后将CGImage通过DrawImage方法绘制到上下文中（这一步会进行解码） 然后从上图形上下文中提取CGImage数据，然后转换成UIImage数据，这个UIiamge数据就是解码后的image  GPU优化细节 #   减少视图层级 避免短时间，大量图片显示 GPU能处理的最大尺寸是4096x4096，一旦超过这个尺寸就会占用cpu资源进行处理，尽量不要超过这个尺寸 减少透明视图 opaque设置为YES（混合部分就要进行和成计算） 避免离屏渲染  离屏渲染 #  GPU有两种渲染方式：
 On-Screen Rendering（当前屏幕渲染）：在当前用于显示的屏幕缓冲区进行渲染操作； Off-Screen Rendering（离屏渲染）：在当前屏幕缓冲区以外开辟一个新缓冲区进行渲染；  离屏渲染产生原因？
渲染的画家算法；上层
那些操作会触发离屏渲染
 光栅化，layer.shouldRastersize=YES 遮罩 mask 圆角 maskToBounds=YES 和 cornerRadius大于0同时设置 阴影（如果设置了layer.shadowPath就不会有离屏渲染）  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/kvo_kvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/kvo_kvc/</guid>
      <description>KVO实践和原理 #  从下面两道面试题入手学习KVO
 iOS用什么方式实现一个对象的KVO？（KVO的本质是什么） 如何手动触发KVO？  KVC #  KVC面试题：
 使用KVC设值是否会触发KVO？ KVC的赋值和取值过程是怎样的？原理是什么？  KVC的设值原理 #  KVC设置内部的调用原理（调用优先级）
 找方法 setValue方法，_setValue方法 如果没找到则调用accessInstanceVariableDirectly（是否可以直接访问成员变量）。如果返回NO则查找终止，抛出异常。如果返回YES则进行第3步 按照：_key -&amp;gt; _isKey -&amp;gt; key -&amp;gt; isKey查找成员变量，找到后直接赋值 如果都没找到，则抛出异常   回答面试题1：会触发KVO，即使直接修改属性（不调用set方法）也会触发KVO；这个和我们自己直接修改成员变量不同（直接修改不会触发KVO）
 KVC的取值过程 #   按照getKey -&amp;gt; key -&amp;gt; isKey -&amp;gt; _key的顺序查找get方法 如果没找到则调用accessInstanceVariableDirectly（是否可以直接访问成员变量）。如果返回NO则查找终止，抛出异常。如果返回YES则进行第3步 按照：_key -&amp;gt; _isKey -&amp;gt; key -&amp;gt; isKey查找成员变量，找到后直接取值 如果都没找到，则抛出异常  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/object_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/object_1/</guid>
      <description>1 OC对象的本质 #  我们平时编写的OC代码，底层实现是C/C++代码。OC中的对象是基于C/C++中的结构体实现的。
1.1 将OC代码转成C/C++代码 #  使用clang的rewrite命令可以将OC转换成C++代码
# 直接生成cpp代码（不推荐）   # 指定平台(iOS arm64) xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp  ps: 安装插件goto shell 可以很方便的在当前位置打开终端
 1.2 NSObject的本质 #  分析C++代码，研究对象本质
struct NSObject_IMPL {  Class isa; // 64位（8个字节） };  // 其中Class是一个结构体指针 16个字节 #  使用class_getInstanceSize()函数获取对象占用的内存
// 获取NSObject类的实例对象的大小 // 查看源码可知，它返回的是成员变量所占的空间大小 // 返回 8 class_getInstanceSize([NSObject class])  // 获取obj指针所指向内存的大小 // 需要先引入：#import &amp;lt;malloc/malloc.h&amp;gt; // 返回 16 malloc_size((__bridge const void *)obj) 回答面试题 #   一个NSObject对象占多少内存？</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.page3app.com/docs/category/interview/pod_01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.page3app.com/docs/category/interview/pod_01/</guid>
      <description>关于Cocoapod的面试题 #  1.在使用Cocoapod创建私有库时遇到那些问题？ #   使用子目录，如果不使用子目录，我们在私有库中创建的目录不会同步到使用者中。 向私有库中添加资源文件，如图片/音频时，使用resource_bundle，可以减少资源文件冲突。但使用asset管理资源时如果我们把asset文件夹直接添加到resource_bundle中会无法访问到其中的文件。后来使用resource属性（描述文件spec中定义）是可以访问的。  </description>
    </item>
    
  </channel>
</rss>
